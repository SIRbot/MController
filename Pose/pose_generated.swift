// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public struct MController_Pose: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_1_21() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case landmarks = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasLandmarks: Bool { let o = _accessor.offset(VTOFFSET.landmarks.v); return o == 0 ? false : true }
  public var landmarksCount: Int32 { let o = _accessor.offset(VTOFFSET.landmarks.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func landmarks(at index: Int32) -> MController_Landmark? { let o = _accessor.offset(VTOFFSET.landmarks.v); return o == 0 ? nil : MController_Landmark(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startPose(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func addVectorOf(landmarks: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: landmarks, at: VTOFFSET.landmarks.p) }
  public static func endPose(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPose(
    _ fbb: inout FlatBufferBuilder,
    landmarksVectorOffset landmarks: Offset = Offset()
  ) -> Offset {
    let __start = MController_Pose.startPose(&fbb)
    MController_Pose.addVectorOf(landmarks: landmarks, &fbb)
    return MController_Pose.endPose(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.landmarks.p, fieldName: "landmarks", required: false, type: ForwardOffset<Vector<ForwardOffset<MController_Landmark>, MController_Landmark>>.self)
    _v.finish()
  }
}

public struct MController_Landmark: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_1_21() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case x = 4
    case y = 6
    case z = 8
    case confidence = 10
    case name = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var x: Float32 { let o = _accessor.offset(VTOFFSET.x.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var y: Float32 { let o = _accessor.offset(VTOFFSET.y.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var z: Float32 { let o = _accessor.offset(VTOFFSET.z.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var confidence: Float32 { let o = _accessor.offset(VTOFFSET.confidence.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var name: String? { let o = _accessor.offset(VTOFFSET.name.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var nameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.name.v) }
  public static func startLandmark(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(x: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: x, def: 0.0, at: VTOFFSET.x.p) }
  public static func add(y: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: y, def: 0.0, at: VTOFFSET.y.p) }
  public static func add(z: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: z, def: 0.0, at: VTOFFSET.z.p) }
  public static func add(confidence: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: confidence, def: 0.0, at: VTOFFSET.confidence.p) }
  public static func add(name: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: name, at: VTOFFSET.name.p) }
  public static func endLandmark(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createLandmark(
    _ fbb: inout FlatBufferBuilder,
    x: Float32 = 0.0,
    y: Float32 = 0.0,
    z: Float32 = 0.0,
    confidence: Float32 = 0.0,
    nameOffset name: Offset = Offset()
  ) -> Offset {
    let __start = MController_Landmark.startLandmark(&fbb)
    MController_Landmark.add(x: x, &fbb)
    MController_Landmark.add(y: y, &fbb)
    MController_Landmark.add(z: z, &fbb)
    MController_Landmark.add(confidence: confidence, &fbb)
    MController_Landmark.add(name: name, &fbb)
    return MController_Landmark.endLandmark(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.x.p, fieldName: "x", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.y.p, fieldName: "y", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.z.p, fieldName: "z", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.confidence.p, fieldName: "confidence", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.name.p, fieldName: "name", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

